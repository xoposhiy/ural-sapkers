#summary Пройденный путь

== Декомпиляция игры ==
Игра написана на Java, причем классы как-то зашифрованы и расшифровываются на лету `ClassLoader`-ом. Чтобы их декомпилировать пришлось подкрутить `ClassLoader` так, чтобы он перед загрузкой типа сохранял расшифрованный class-файл в отдельную папочку. 

Расшифрованные class файлы лежат тут: `/trunk/project-beta/DecryptedClassFiles`

Декомпилированные с помощью JD файлы лежат тут: `/trunk/project-beta/DecompiledByJD`

== Конечная цель ==
Нужно написать клиента, который подцепится к серверу, введет как можно больше конфигурационных и dma токенов, запустит игру и наберет в ней как можно больше очков. Токены нужны для того, чтобы открывать какие-то дополнительные абилки в игре.

Разница между dma- и config-токенами пока до конца неясна. *ВАЖНО*: токены зависят от имени команды; имя нашей команды — *ural-sapkers*.

Открытые токены можно посмотреть в `/trunk/interesting/opened-tokens.txt` и на страничке [Tokens].

Мы открыли все существующие конфиги и дма.

==Логгирование==
Сервер активно использует логгирование с помощью log4j. Однако оно как-то плохо сконфигурировано и реально ничего не логгируется. Было бы полезно научиться переконфигурировать log4j так, чтобы включилось детальное логгирование того, что происходит на сервере. 

== Найденные артефакты внутри исходников ==

[SapkaProtocol] — формальная грамматика для некоего протокола...

== Результаты исследования сервера как black-box ==

1. Если:
  - подцепиться двумя клиентами (telnet) к портам 20015 и 20016

  - в первом ввести "team team1;launch;", во втором "team team2;launch;"

  - project-beta выводит много раз строку "?&?&;" (каждому из клиентов), затем:

    "GEND P1 0 1, P2 0 2", что, предположительно, означает "Game END",

    P1 (игрок 1), 0 (баллов), 1 (место)

    P2 (игрок 2), 0 (баллов), 2 (место)

    (см. файл "\DecompiledByJD\b\com\stanfy\contest\a\a\b.java")

    Эта строчка ("GEND P0 0 1,P1 0 2;") кладется еще в _result.out_

2. Цепляемся к порту 20090 визуализатора - видим нечто, напоминающее карту.
{{{
PID0&10
..???????..
.?????????.
???????????
???????????
???????????
???????????
???????????
???????????
???????????
.?????????.
..???????..
}}}
Все, что выводится в визуализатор, записывается еще и в файл _trace.out_


fill me please!


== Tools ==

_which.pl_ - простая тулза для поиска файла, в котором лежит реализация данного класса. Может, пригодится. Как использовать: см. _which.txt_